" vim: set ts=2 sw=2 tw=80 et :

" =============================== Vim ENV =====================================
"
colo jellybeans
"
" If we have a 256color Term then use 256colors and disable BCE
set term=$TERM
if &term =~? '256color'
  set t_Co=256
  set t_ut=
endif
"
" If we don't have a 256color term at least enable 16colors
if &t_Co == 8 && $TERM !~# '^linux'
  set t_Co=16
endif
"
set nocompatible
" Visual Bell will make screen flash white when you git end of line
"set visualbell
set shell=/usr/bin/bash
"
if !empty(&viminfo)
  set viminfo^=!
endif
" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

" ============================== Vim Conifg ===================================
" Enable modelines with Securemodelines plugin
"set modelines=0
"set hidden
set switchbuf=useopen
set noruler " show the line number instead
set number
"set relativenumber
"
" Time in milliseconds for redrawing the display
" applies to searching for patterns and match
" suposidly only avable when compiled with undocumented option
" +reltime
" It stops screen from locking up if I over scroll
set redrawtime=2000
"
set backspace=indent,eol,start
set complete-=i
set nrformats-=octal
" Timeout - time you have to complete a <silent> <Leader>BLA
set ttimeout
set ttimeoutlen=50
set display+=lastline,uhex
set autoread
" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

" +++++++++++++++++++++++++ Vim Config Statements +++++++++++++++++++++++++++++
"
" Make Sure that Vim returns to the same line when we reopen a file
augroup line_return
  au!
  au BufReadPost *
  \ if line("'\"") > 0 && line("'\"") <= line("$") |
    \ execute 'normal! g`"zvzz' |
  \ endif
augroup END
"
" From vim-sensible Prob dont need or at lest dont need them to be if else
if has('autocmd')
  filetype plugin indent on
endi
"
if has('syntax') && !exists('g:syntax_on')
  syntax enable
endif
"
if &listchars ==# 'eol:$'
  set listchars=tab:>\ ,trail:-,extends:>,precedes:<,nbsp:+
  if !has('win32') && (&termencoding ==# 'utf-8' || &encoding ==# 'utf-8')
    let &listchars = "tab:\u21e5 ,trail:\u2423,extends:\u21c9,precedes:\u21c7,nbsp:\u00b7"
  endif
endif
"
if !exists('g:loaded_matchit') && findfile('plugin/matchit.vim', &rtp) ==# ''
  runtime! macros/matchit.vim
endif
" ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,

" ++++++++++++++++++++++++++++ Helper Functions +++++++++++++++++++++++++++++++
"
" Set Mode Independent Scroll variables
function! SetScrollCommon()
    set ttyfast
    "set nottyfast
    set lazyredraw
    set scrolloff=8
    set sidescrolloff=4
endfunction
"
" Switch to Scrolling mode
function! ScrollModeToggle()
  if g:scrollmode > 0
    set scrolljump=-12
    set ttyscroll=4
    let g:scrollmode = 0
  else
    set scrolljump=1
    set ttyscroll=8
    let g:scrollmode = 1
  endif
endfunction
"
" Toggle Spell check
function! SpellCheckToggle()
  if &spell
    setlocal nospell
  else
    setlocal spell
  endif
endfunction
"
" Toggle Code Folding
function! FoldColumnToggle()
  if &foldenable
    setlocal nofoldenable
  else
    setlocal foldenable
  endif
endfunction
"
" Append modeline after last line in buffer.
function! AppendModeline()
  let l:modeline = printf(" vim: set ts=%d sw=%d tw=%d %set :",
    \ &tabstop, &shiftwidth, &textwidth, &expandtab ? '' : 'no')
  let l:modeline = substitute(&commentstring, "%s", l:modeline, "")
  call append(line("$"), l:modeline)
endfunction
"
" Append Time Stamp and Update file
function! TimeStampUpdate()
  let l:modeline = printf(" vim: set ts=%d sw=%d tw=%d %set :",
    \ &tabstop, &shiftwidth, &textwidth, &expandtab ? '' : 'no')
  let l:modeline = substitute(&commentstring, "%s", l:modeline, "")
  call append(line("$"), l:modeline)
endfunction
" ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,

" ============================== Scrolling ====================================
"
"  - + - + - + - + - NOTE - + - + - + - + -
"
" :help scroll
" -When the cursor is on the last line of the buffer nothing happens
"  and a beep is produced.
" That is reason gnu-screen will white when over-scrolling or line end is hit
"
" + + + + + + + + + + + + + + + + + + + + +
"
" ttyfast
" Send more chars to the term instead of using lineupdate
"
" scrolljump=
" if set to a neg number it is interrupted as a percent of visible # of lines
"
" ttyscroll=
" Maximum number of lines to scroll before vim uses redrawing instead
"
call SetScrollCommon()
" Set Default Scroll Mode 1 for JumpDraw 0 for Scroll
let g:scrollmode = 1
call ScrollModeToggle()
"
" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

" ============================= Show Settings =================================
set laststatus=2
set showtabline=1
" show matching bracket
set showmatch
set showcmd
set showbreak=">> "
" vim-airline will show the mode
set noshowmode
" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

" ============================= Indentation ===================================
set autoindent
set smartindent
set smarttab
set shiftwidth=2
set softtabstop=2
set tabstop=2
set expandtab
set shiftround
" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

" =============================== Line Wrap ===================================
set wrap
"set nowrap
set linebreak
set textwidth=80
set formatoptions=qrn1
set colorcolumn=80
" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

" ============================== Swap Files ===================================
set dir=~/.vim/tmp/
set history=3000
set updatecount=250
set maxmem=49152
" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

" ============================ Persistent Undo ================================
set undodir=~/.vim/backups/
set undolevels=200
set undofile
" Make Vim able to edit crontab files again
set backupskip=/tmp/*,/private/tmp/*"
" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

" ============================= Window and Buffer Config ======================
set wildmenu
"set wildignore=*.o,*~,.lo,*.exe,*.bak,*.pyc
set wildignore+=*.o,*~,.lo,*.exe,*.bak
set wildmode=list:longest
" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

" ============================ Tabpage Config =================================
set tabpagemax=50
" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

" ================================ Searching ==================================
set ignorecase
set smartcase
set gdefault
" Clean hi-lighting with the <silent> <Leader>c Key Map in - File Processing Key Maps -
set hlsearch
" incremental search - Start jumping around as you type. No fun at all
"set incsearch
" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

" =============================== Folding =====================================
set nofoldenable
set foldmethod=indent
set foldnestmax=3
" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

" -------------------------- Function Key Maps --------------------------------
nnoremap <F12> :redo<CR>
inoremap <F12> <Esc> <Esc> :redo<CR>
nnoremap <F11> :update<CR>
inoremap <F11> <Esc> <Esc> :update<CR>
nnoremap <F10> :undo<CR>
inoremap <F10> <Esc> <Esc> :undo<CR>
nnoremap <F9> :NERDTreeTabsToggle<CR>
inoremap <F9> <Esc> <Esc> :NERDTreeTabsToggle<CR>
nnoremap <F8> :confirm quit<CR>
inoremap <F8> <Esc> <Esc> :confirm quit <CR>
set pastetoggle=<F7>
" .............................................................................

" -------------------------- Movement Key Maps --------------------------------
"
"  - + - + - + - + - NOTE - + - + - + - + -
"
" Set GNU-screen's screen-bindings :
"
"  - Global
"  - Applicatoin Independent
"  - Terminal Independent
"  - Vim Mode Independent
"
"      Alt-y Is a Home Key
"      Alt-u Is a PgUp Key
"      Alt-i Is a PgDown Key
"      Alt-o Is a  End key
"      Alt-h,j,k,l Are Cursor Left,Up,Down,Right
"
" + + + + + + + + + + + + + + + + + + + + +
"
" Move between window panes with Shift+{h,j,k,l}
nnoremap <silent> <S-h> :wincmd h<CR>
nnoremap <silent> <S-j> :wincmd j<CR>
nnoremap <silent> <S-k> :wincmd k<CR>
nnoremap <silent> <S-l> :wincmd l<CR>
" previous - next Buffer
nnoremap <silent> <S-u> :tabp<CR>
nnoremap <silent> <S-i> :tabn<CR>
nnoremap <silent> <S-b> :bprevious<CR>
nnoremap <silent> <S-n> :bnext<CR>
" Resize Window
nnoremap <silent> <S-a> :vertical resize -5<cr>
nnoremap <silent> <S-s> :resize +5<cr>
nnoremap <silent> <S-d> :resize -5<cr>
nnoremap <silent> <S-f> :vertical resize +5<cr>
" .............................................................................

" ------------------------ Window and Buffer Key Maps -------------------------
"
"nnoremap <silent> <S-w> :call JumpDrawMode()<CR>
nnoremap <silent> <S-w> :call ScrollModeToggle()<CR>
nnoremap <silent> <S-r> :bdelete<CR>
nnoremap <silent> <Leader>w :update<CR>
" Save - Ask to save Quit
nnoremap <silent> <Leader>q :confirm quit <CR>
nnoremap <silent> <Leader>u :undo<CR>
nnoremap <silent> <Leader>r :redo<CR>
" .............................................................................

" ------------------------ File Processing Key Maps ---------------------------
"
"
" Remove remove trailing spaces and tabs
nnoremap <silent> <S-o> :%s/\s\+$//<cr>:let @/=''<cr>:nohlsearch<CR>
nnoremap <silent> <Leader>o :%s/\s\+$//<cr>:let @/=''<cr>:nohlsearch<CR>
"
nnoremap <silent> <S-c> :nohlsearch
nnoremap <silent> <Leader>c :nohlsearch<CR>
"
nnoremap <silent> <S-x> :call SpellCheckToggle()<CR>
nnoremap <silent> <Leader>x call SpellCheckToggle()<cr>
nnoremap <silent> <S-z> z=
nnoremap <silent> <Leader>z z=
"
nnoremap <silent> <S-y> :call FoldColumnToggle()<CR>
nnoremap <silent> <Leader>f :call FoldColumnToggle()<cr>
"
nnoremap <silent> <Leader>ml :call AppendModeline()<CR>
"
nnoremap <silent> <Leader>ts :call TimeStampUpdate()<CR>
" .............................................................................

